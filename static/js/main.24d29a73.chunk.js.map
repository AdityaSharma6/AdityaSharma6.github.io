{"version":3,"sources":["components/PersonaButton.tsx","components/PersonaCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PersonaButton","props","className","onClick","event","window","open","link","icon","buttonText","PersonaButtonContent","PersonaCard","map","buttonProps","key","App","Boolean","location","hostname","match","library","add","faCoffee","faFile","faGithub","faLinkedin","faEnvelope","faCode","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mWAYe,SAASA,EAAcC,GAKlC,OACI,yBAAKC,UAAW,kCACZ,4BAAQC,QANA,SAACC,GACbC,OAAOC,KAAKL,EAAMM,KAAM,WAKML,UAAW,iBACjC,yBAAKA,UAAW,mCACZ,kBAAC,IAAD,CAAiBM,KAAMP,EAAMO,KAAMN,UAAW,4BAElD,yBAAKA,UAAW,8BACZ,0BAAMA,UAAW,qBAAsBD,EAAMQ,eCpBjE,IAAMC,EAA6C,CAC/C,CACIF,KAAM,CAAC,MAAO,UACdC,WAAY,SACZF,KAAM,oCAEV,CACIC,KAAM,CAAC,MAAO,QACdC,WAAY,UAGhB,CACID,KAAM,CAAC,MAAO,YACdC,WAAY,WACZF,KAAM,8CAEV,CACIC,KAAM,WACNC,WAAY,QACZF,KAAM,8BAEV,CACIC,KAAM,OACNC,WAAY,WACZF,KAAM,2BA4BCI,EAtB8B,WACzC,OACI,yBAAKT,UAAW,eACZ,6BACI,4CAEJ,yBAAKA,UAAW,+BACXQ,EAAqBE,KAAI,SAAAC,GAAW,OACjC,kBAAC,EAAD,CAAeC,IAAKD,EAAYJ,WAAYD,KAAMK,EAAYL,KAAMC,WAAYI,EAAYJ,WAAYF,KAAMM,EAAYN,WAGlI,iDACA,iFACA,uDACA,kDACA,uCACA,0DACA,+C,MCvCGQ,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCPNC,IAAQC,IAAIC,IAAUC,IAAQC,IAAUC,IAAYC,IAAYC,KAEhEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.24d29a73.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./PersonaButton.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconName, IconPrefix } from \"@fortawesome/fontawesome-svg-core\";\n\nexport interface PersonaButtonProps {\n    icon: IconName | [IconPrefix, IconName],\n    link?: string,\n    buttonText: string\n}\n\n\nexport default function PersonaButton(props: PersonaButtonProps){\n    const onClick = (event: any) => {\n        window.open(props.link, \"_blank\");\n    }\n\n    return(\n        <div className={\"singularPersonaButtonContainer\"}>\n            <button onClick={onClick} className={\"personaButton\"}>\n                <div className={\"personaFontAwesomeIconContainer\"}>\n                    <FontAwesomeIcon icon={props.icon} className={\"personaFontAwesomeIcon\"}/>\n                </div>\n                <div className={\"personaButtonTextContainer\"}>\n                    <span className={\"personaButtonText\"}>{props.buttonText}</span>\n                </div>\n            </button>  \n        </div>\n          \n    );\n}","import React from 'react';\nimport \"./PersonaCard.css\";\nimport PersonaButton, {PersonaButtonProps} from \"./PersonaButton\";\n\nconst PersonaButtonContent: PersonaButtonProps[] = [\n    {\n        icon: [\"fab\", \"github\"],\n        buttonText: \"GitHub\",\n        link: \"https://github.com/AdityaSharma6\"\n    },\n    {\n        icon: [\"far\", \"file\"],\n        buttonText: \"Resume\",\n\n    },\n    {\n        icon: [\"fab\", \"linkedin\"],\n        buttonText: \"LinkedIn\",\n        link: \"https://www.linkedin.com/in/adityasharma6/\"\n    },\n    {\n        icon: \"envelope\",\n        buttonText: \"Email\",\n        link: \"mailto:shara24@mcmaster.ca\"\n    },\n    {\n        icon: \"code\",\n        buttonText: \"Leetcode\",\n        link: \"https://www.google.com\"\n    },\n\n];\n\n\nconst PersonaCard: React.FunctionComponent = () => {\n    return (\n        <div className={\"personaCard\"}>\n            <div>\n                <span> Picture </span>\n            </div>\n            <div className={\"personaCardButtonsContainer\"}>\n                {PersonaButtonContent.map(buttonProps => (\n                    <PersonaButton key={buttonProps.buttonText} icon={buttonProps.icon} buttonText={buttonProps.buttonText} link={buttonProps.link}/>\n                ))}\n            </div>\n            <span> Aditya Sharma </span>\n            <span> Software Engineering & Biomedical Engineering </span>\n            <span> McMaster University </span>\n            <span> Toronto, Canada</span>\n            <span> ... </span>\n            <span>GitHub, LinkedIn, Resume</span>\n            <span>Gmail, LC, </span>\n        </div>\n    );\n}\n\nexport default PersonaCard;","import React from 'react';\nimport PersonaCard from \"./components/PersonaCard\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <PersonaCard />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCoffee, faEnvelope, faCode } from '@fortawesome/free-solid-svg-icons'\nimport { faGithub, faLinkedin } from '@fortawesome/free-brands-svg-icons'\nimport { faFile} from \"@fortawesome/free-regular-svg-icons\"\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlibrary.add(faCoffee, faFile, faGithub, faLinkedin, faEnvelope, faCode)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}